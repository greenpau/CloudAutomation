#!/usr/bin/env python3

''' Author: Paul Greenberg @greenpau
    File:   AwsCloudFormationTemplateMaker
'''

import os
import sys
if sys.version_info[0] < 3:
    sys.stderr.write(os.path.basename(__file__) + ' requires Python 3 or higher.\n')
    sys.stderr.write("python3 " + __file__ + ' -h\n')
    sys.exit(1)

import string
import argparse
import pprint
import datetime
import traceback
import re
import ipaddress
import inspect
import logging
import struct
import yaml
import json

tmpl = {}
db = None

logging.basicConfig(format='%(asctime)s - %(name)s - %(funcName)s() - %(levelname)s - %(message)s')
logger = logging.getLogger(__file__)
logger.setLevel(logging.CRITICAL)

def _find_rt_id(vrf, vpc):
    ''' Find VRF id by matching provided VRF name to VPC resources in a stack '''
    for res in tmpl['Resources']:
        if 'Type' not in tmpl['Resources'][res]:
            continue
        if 'Properties' not in tmpl['Resources'][res]:
            continue
        if 'Tags' not in tmpl['Resources'][res]['Properties']:
            continue
        if tmpl['Resources'][res]['Type'] != 'AWS::EC2::RouteTable':
            continue
        if 'VpcId' not in tmpl['Resources'][res]['Properties']:
            continue
        if 'Ref' not in tmpl['Resources'][res]['Properties']['VpcId']:
            continue
        if tmpl['Resources'][res]['Properties']['VpcId']['Ref'] != vpc:
            continue
        for tag in tmpl['Resources'][res]['Properties']['Tags']:
            if 'Key' not in tag:
                continue
            if 'Value' not in tag:
                continue
            if tag['Key'] == 'VRF' and tag['Value'] == vrf:
                return res
    return None

def _add_vrf(vrf, net_id, net, vpc):
    rt_oid = None
    for res in tmpl['Resources']:
        if 'Type' not in tmpl['Resources'][res]:
            continue
        if 'Properties' not in tmpl['Resources'][res]:
       	    continue
        if 'Tags' not in tmpl['Resources'][res]['Properties']:
            continue
        if tmpl['Resources'][res]['Type'] != 'AWS::EC2::RouteTable':
            continue
        if 'VpcId' not in tmpl['Resources'][res]['Properties']:
            continue
        if 'Ref' not in tmpl['Resources'][res]['Properties']['VpcId']:
            continue
        if tmpl['Resources'][res]['Properties']['VpcId']['Ref'] != vpc:
            continue
        for tag in tmpl['Resources'][res]['Properties']['Tags']:
            if 'Key' not in tag:
                continue
            if 'Value' not in tag:
                continue
            if tag['Key'] == 'VRF' and tag['Value'] == vrf:
                rt_oid = res
                break
    if rt_oid is None:
        ''' AWS::EC2::RouteTable Reference: http://goo.gl/ycRvsS '''
        for i in range (0, 1000000):
            if 'RouteTable' + str(i) not in tmpl['Resources']:
                rt_oid = 'RouteTable' + str(i)
                break
        res = {}
        res['Type'] = 'AWS::EC2::RouteTable'
        res['Properties'] = {}
        res['Properties']['VpcId'] = {'Ref': vpc}
        res['Properties']['Tags'] = []
        res['Properties']['Tags'].append({'Key': 'VRF', 'Value': vrf})
        res['Properties']['Tags'].append({'Key': 'Application', 'Value': {'Ref': 'AWS::StackName'}})
        tmpl['Resources'][rt_oid] = res
    if rt_oid is not None:
        ''' AWS::EC2::SubnetRouteTableAssociation Reference: http://goo.gl/HmiDXU '''
        rta_oid = None
        for i in range (0, 1000000):
            if rt_oid + 'Association' + str(i) not in tmpl['Resources']:
                rta_oid = rt_oid + 'Association' + str(i)
                break
        res = {}
        res['Type'] = 'AWS::EC2::SubnetRouteTableAssociation'
        res['Properties'] = {}
        res['Properties']['SubnetId'] = {'Ref': net_id}
        res['Properties']['RouteTableId'] = {'Ref': rt_oid}
        tmpl['Resources'][rta_oid] = res
    return

def _find_vpc_id(net):
    ''' Find VPC by matching provided network to VPC resources in a stack '''
    found = False
    for oid in db:
        if 'aws-type' not in db[oid]:
            continue
        if 'subnet' not in db[oid]:
            continue
        if db[oid]['aws-type'] != 'VPC':
            continue
        if ipaddress.ip_network(db[oid]['subnet']).overlaps(ipaddress.ip_network(net)):
            return oid
    if not found:
        return None

def _add_resource(oid, data):
    ''' Add CloudFormation Resources: http://goo.gl/UQxaJ2 '''

    allowed_aws_types = [
        'VPC',
        'Subnet',
        'CustomerGateway',
        'InternetGateway',
    ]

    allowed_aws_params = {
        'VPC': [
            'aws-type',
            'name',
            'vrf',
            'description',
            'subnet',
        ],
        'Subnet': [
            'aws-type',
            'aws-az',
            'name',
            'vrf',
            'description',
            'subnet',
        ],
        'CustomerGateway': [
            'name',
            'aws-type',
            'description',
            'ipaddr',
            'bgp-asn',
            'vpn-type',
            'vpc',
            'dry-run',
            'routing',
            'vpn-routes',
        ],
        'InternetGateway': [
            'aws-type',
            'description',
            'name',
            'vrf',
            'vpc',
            'routes',
        ],
    }

    allowed_aws_azs = [
        'ap-northeast-1a', 'ap-northeast-1b', 'ap-northeast-1c'
        'ap-southeast-1a', 'ap-southeast-1b',
        'ap-southeast-2a', 'ap-southeast-2b',
        'eu-central-1a', 'eu-central-1b', 'eu-central-1c',
        'eu-west-1a', 'eu-west-1b', 'eu-west-1c',
        'sa-east-1a', 'sa-east-1b',
        'us-east-1a', 'us-east-1b', 'us-east-1c', 'us-east-1d', 'us-east-1e',
        'us-west-1a', 'us-west-1b', 'us-west-1c',
        'us-west-2a', 'us-west-2b', 'us-west-2c',
    ]

    try:
        tmpl['Resources']
    except KeyError:
        tmpl['Resources'] = {}

    if oid in tmpl['Resources']:
        logger.error(oid + ' resource already exists, exiting ...')
        sys.exit(1)

    if 'aws-type' not in data:
        logger.error('AWS type is missing for resource ' + oid + ', exiting ...')
        sys.exit(1)

    if data['aws-type'] not in allowed_aws_types:
        logger.error('AWS type ' + data['aws-type'] + ' is not allowed, exiting ...')
        sys.exit(1)

    for param in data:
        if param not in allowed_aws_params[data['aws-type']]:
            logger.error('AWS parameter ' + param + ' for ' + oid + ' is either not allowed \
                          or invalid, exiting ...')
            sys.exit(1)

    res = {}

    if data['aws-type'] == 'VPC':
        ''' AWS::EC2::VPC Reference: http://goo.gl/GWun0B '''
        res['Type'] = 'AWS::EC2::VPC'
        res['Properties'] = {}
        res['Properties']['EnableDnsSupport'] = 'true'
        res['Properties']['EnableDnsHostnames'] = 'true'
        if 'subnet' in data:
            res['Properties']['CidrBlock'] = data['subnet']
        else:
            logger.error('AWS resource ' + oid + ' is missing subnet parameter, exiting ...')
            sys.exit(1)

    elif data['aws-type'] == 'Subnet':
        ''' AWS::EC2::Subnet Reference: http://goo.gl/i65Nwd '''
        res['Type'] = 'AWS::EC2::Subnet'
        res['Properties'] = {}
        if 'aws-az' not in data:
            logger.error('AWS resource ' + oid + ' is missing AvailabilityZone  parameter, \
                          exiting ...')
            sys.exit(1)
        else:
            if data['aws-az'] in allowed_aws_azs:
                res['Properties']['AvailabilityZone'] = data['aws-az']
            else:
                logger.error('AvailabilityZone ' + data['aws-az'] + ' for AWS resource ' + \
                              oid + ' is invalid, exiting ...')
                sys.exit(1)
        if 'subnet' in data:
            res['Properties']['CidrBlock'] = data['subnet']
        else:
            logger.error('AWS resource ' + oid + ' is missing subnet parameter, exiting ...')
            sys.exit(1)
        res['Properties']['VpcId'] = {'Ref': _find_vpc_id(data['subnet'])}
        if res['Properties']['VpcId'] is None:
            logger.error('AWS resource ' + oid + ' has an address range located \
                         outside the scope of any existing VPC in this stack, exiting ...')
            sys.exit(1)
        if 'vrf' in data:
            vrf_name = data['vrf']
            _add_vrf(vrf_name, oid, data['subnet'], _find_vpc_id(data['subnet']))

    elif data['aws-type'] == 'CustomerGateway':
        ''' AWS::EC2::CustomerGateway Reference: http://goo.gl/Qz16jr '''
        res['Type'] = 'AWS::EC2::CustomerGateway'
        res['Properties'] = {}
        if 'ipaddr' not in data:
            logger.error('AWS resource ' + oid + ' is missing "ipaddr" parameter, exiting ...')
            sys.exit(1)
        res['Properties']['IpAddress'] = data['ipaddr']
        if 'bgp-asn' not in data:
            logger.error('AWS resource ' + oid + ' is missing "bgp-asn" parameter, exiting ...')
            sys.exit(1)
        res['Properties']['BgpAsn'] = data['bgp-asn']
        if 'vpn-type' not in data:
            res['Properties']['Type'] = 'ipsec.1'
        else:
            res['Properties']['Type'] = data['vpn-type']
        if 'dry-run' in data:
            if data['dry-run'] is True:
                res['Properties']['DryRun'] = 'true'

        ''' AWS::EC2::VPNGateway Reference: http://goo.gl/ANPZ9K '''
        vpn_gw_res = {}
        vpn_gw_res['Type'] = 'AWS::EC2::VPNGateway'
        vpn_gw_res['Properties'] = {}
        if 'vpn-type' not in data:
            vpn_gw_res['Properties']['Type'] = 'ipsec.1'
        else:
            vpn_gw_res['Properties']['Type'] = data['vpn-type']
        vpn_gw_res['Properties']['Tags'] = []
        vpn_gw_res['Properties']['Tags'].append({'Key': 'Application',
                                                 'Value': {'Ref': 'AWS::StackName'}})
        tmpl['Resources'][oid + 'VPNGateway'] = vpn_gw_res

        ''' AWS::EC2::VPCGatewayAttachment Reference: http://goo.gl/XR7bc6 '''
        vpn_gw_attach_res = {}
        vpn_gw_attach_res['Type'] = 'AWS::EC2::VPCGatewayAttachment'
        vpn_gw_attach_res['Properties'] = {}
        vpn_gw_attach_res['Properties']['VpcId'] = {'Ref': _find_vpc_id(data['vpc'])}
        vpn_gw_attach_res['Properties']['VpnGatewayId'] = {'Ref': oid + 'VPNGateway'}
        tmpl['Resources'][oid + 'VPNGatewayAttachment'] = vpn_gw_attach_res

        ''' AWS::EC2::VPNConnection Reference: http://goo.gl/9AiPm9 '''
        vpn_conn_res = {}
        vpn_conn_res['Type'] = 'AWS::EC2::VPNConnection'
        vpn_conn_res['Properties'] = {}
        if 'vpn-type' not in data:
            vpn_conn_res['Properties']['Type'] = 'ipsec.1'
        else:
            vpn_conn_res['Properties']['Type'] = data['vpn-type']
        if 'routing' in data:
            if data['routing'] == 'static':
                vpn_conn_res['Properties']['StaticRoutesOnly'] = 'true'
            elif data['routing'] == 'dynamic':
                vpn_conn_res['Properties']['StaticRoutesOnly'] = 'false'
            else:
                logger.error('AWS resource ' + oid + ' has invalid "routing" parameter, \
                              because only static and dynamic are supported, exiting ...')
                sys.exit(1)
        vpn_conn_res['Properties']['CustomerGatewayId'] = {'Ref': oid}
        vpn_conn_res['Properties']['VpnGatewayId'] = {'Ref': oid + 'VPNGateway'}
        tmpl['Resources'][oid + 'VPNConnection'] = vpn_conn_res

        ''' AWS::EC2::VPNConnectionRoute Reference: http://goo.gl/0lY7js '''
        if 'vpn-routes' in data:
            for i in sorted(data['vpn-routes']):
                irt = 'VPNConnectionRoute' + str(i)
                vars()[irt] = {}
                vars()[irt]['Type'] = 'AWS::EC2::VPNConnectionRoute'
                vars()[irt]['Properties'] = {}
                vars()[irt]['Properties']['VpnConnectionId'] = {'Ref': oid + 'VPNConnection'}
                vars()[irt]['Properties']['DestinationCidrBlock'] = data['vpn-routes'][i]
                tmpl['Resources'][oid + irt] = vars()[irt]

    elif data['aws-type'] == 'InternetGateway':
        
        if 'vpc' not in data:
            logger.error('template parameter vpc for ' + oid + ' is missing, exiting ...')
        if 'vrf' not in data:
            logger.error('template parameter vrf for ' + oid + ' is missing, exiting ...')
        
        vpc_id = _find_vpc_id(data['vpc'])
        if vpc_id is None:
            return None
        rt_id = _find_rt_id(data['vrf'], vpc_id)
        if rt_id is None:
            return None

        #print(vpc_id)
        #print(rt_id)

        ''' AWS::EC2::InternetGateway Reference: http://goo.gl/2Jcc8b '''
        res['Type'] = 'AWS::EC2::InternetGateway'
        res['Properties'] = {}
        
        ''' AWS::EC2::VPCGatewayAttachment Reference: http://goo.gl/XR7bc6 '''
        gw_id = None
        for i in range (0, 1000000):
            if oid + 'VPCGatewayAttachment' + str(i) not in tmpl['Resources']:
                gw_id = oid + 'VPCGatewayAttachment' + str(i)
                break
        gw = {}
        gw['Type'] = 'AWS::EC2::VPCGatewayAttachment'
        gw['Properties'] = {}
        gw['Properties']['VpcId'] = {'Ref': vpc_id}
        gw['Properties']['InternetGatewayId'] = {'Ref': oid}
        tmpl['Resources'][gw_id] = gw
        
        ''' AWS::EC2::Route Reference: http://goo.gl/0lY7js '''
        if 'routes' in data:
            for i in sorted(data['routes']):
                irt = None
                for j in range (0, 1000000):
                    if oid + 'Route' + str(j) not in tmpl['Resources']:
                        irt = oid + 'Route' + str(j)
                        break
                vars()[irt] = {}
                vars()[irt]['Type'] = 'AWS::EC2::Route'
                vars()[irt]['Properties'] = {}
                vars()[irt]['Properties']['RouteTableId'] = {'Ref': rt_id}
                vars()[irt]['Properties']['DestinationCidrBlock'] = data['routes'][i]
                vars()[irt]['Properties']['GatewayId'] = {'Ref': oid}
                tmpl['Resources'][irt] = vars()[irt]
    else:
        pass

    if not res:
        logger.error('failed to create AWS resource for ' + oid)
        return

    if 'Tags' not in res['Properties']:
        res['Properties']['Tags'] = []
    res['Properties']['Tags'].append({'Key': 'Application', 'Value': {'Ref': 'AWS::StackName'}})
    if 'description' in data:
        res['Properties']['Tags'].append({'Key': 'Description', 'Value': data['description']})
    if 'name' in data:
        res['Properties']['Tags'].append({'Key': 'Name', 'Value': data['name']})

    tmpl['Resources'][oid] = res
    return oid

def main():
    """ Main function """
    global db
    descr = str(__file__) + ' - AWS Cloud Formation Template Maker\n\n'
    epil = '\ngithub: https://github.com/greenpau/aws-cf-tmaker\n\n'
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, \
                                     description=descr, epilog=epil)
    main_group = parser.add_argument_group('arguments')
    main_group.add_argument('--input-file', dest='ifile', metavar='INPUT-FILE', required=True, \
                            type=argparse.FileType('r'), help='input file')
    main_group.add_argument('--output-file', dest='ofile', metavar='OUTPUT-FILE',\
                            type=str, help='output file')
    parser.add_argument('-l', '--log-level', dest='ilog', metavar='LEVEL', type=int, default=0, \
                        choices=range(1, 4), help='log level (default: 0, max: 3)')
    args = parser.parse_args()

    if args.ilog == 1:
        logger.setLevel(logging.WARN)
    elif args.ilog == 2:
        logger.setLevel(logging.INFO)
    elif args.ilog == 3:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.ERROR)

    try:
        db = yaml.load(args.ifile)
    except Exception as e:
        logger.error('failed to load YAML configuration data file because ' + str(e))
        sys.exit(1)

    tmpl['AWSTemplateFormatVersion'] = '2010-09-09'
    tmpl['Description'] = 'This template creates a VPC'

    pending = list(db.keys())
    pending_cycle = 0
    while pending:
        for res in sorted(db):
            if res not in pending:
                continue
            if _add_resource(res, db[res]) is not None:
                pending.remove(res)
        pending_cycle += 1
        if pending_cycle > 15:
            logger.error('encountered issues with ' + ','.join(pending) + ', exiting ...')
            sys.exit(1)

    if args.ofile is not None:
        with open(args.ofile, 'w') as f:
            f.write(json.dumps(tmpl, sort_keys=True, indent=4, separators=(',', ': ')))
            f.write("\n")
    else:
        pprint.pprint(json.dumps(tmpl, sort_keys=True, indent=4, separators=(',', ': ')))

if __name__ == '__main__':
    main()
